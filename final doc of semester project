package pkgfinal.doc;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.IOException ;
import java.io.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;

import java.awt.GridLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

class UserAuthentication {

    
    public static void writePasswordEmail(String email, String password) {
        String fileName = "d:\\userPassword.txt";

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
            String userCredentials = password + "," + email; // Combine password and email
            writer.write(userCredentials);
            writer.close();
            System.out.println("Password and email written to file successfully.");
        } catch (IOException e) {
            System.out.println("An error occurred while writing the password and email to file: " + e.getMessage());
        }
    }
    static String readPasswordEmail(String fileName) {
        String storedPass = null;

        try {
            BufferedReader fr = new BufferedReader(new FileReader(fileName));
            storedPass = fr.readLine();
            fr.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        return storedPass;
    }
    public static void userAuthentication(Scanner console) {
        String fileName = "d:\\userPassword.txt";
        String storedPasswordEmail = readPasswordEmail(fileName);

        if (storedPasswordEmail == null || storedPasswordEmail.isEmpty()) {
            System.out.println("Password File is Empty...");
            return;
        }
       boolean isAuthenticated = false;

        do {
        System.out.print("Enter your Email: ");
        String userEmail = console.next();
        System.out.print("Enter your Password: ");
        String userEnteredPassword = console.next();

        String[] credentials = storedPasswordEmail.split(","); // Split stored credentials into email and password

            if (userEnteredPassword.equals(credentials[0]) && userEmail.equals(credentials[1])) {
                System.out.println("Welcome user!");
                isAuthenticated = true;
        } else {
            System.out.println("Your Email or Password is Incorrect...");
        }
        } while (!isAuthenticated);
    }   
}
  abstract class Vehicle {
    private String licensePlate;
    private String type;
  

    public Vehicle(String licensePlate, String type) {
        this.licensePlate = licensePlate;
        this.type = type;
      
    }

    public String getLicensePlate() {
        return licensePlate;
    }

    public String getType() {
        return type;
    }

}
// Car class
class Car extends Vehicle {
    public Car(String licensePlate) {
        super(licensePlate, "Car");
    }   
}
// Motorcycle class
class Motorcycle extends Vehicle {
    public Motorcycle(String licensePlate) {
        super(licensePlate, "Motorcycle");
    }   
}
// ParkingSpot class
class ParkingSpot {
    private int spotNumber;
    private Vehicle parkedVehicle;
 

    public ParkingSpot(int spotNumber) {
        this.spotNumber = spotNumber;
    }

    public boolean isOccupied() {
        return parkedVehicle != null;
    }

    public Vehicle getParkedVehicle() {
        return parkedVehicle;
    }

   public void parkVehicle(Vehicle vehicle) {
        parkedVehicle = vehicle;
      
    }

    public int getSpotNumber() {
        return spotNumber;
    }

    
}
class ParkingLot {
    private int capacity;
    private ArrayList<ParkingSpot> parkingSpots;
    private ArrayList<Vehicle> parkedVehicles;

    public ParkingLot(int capacity) {
        this.capacity = capacity;
        parkingSpots = new ArrayList<>(capacity);
        parkedVehicles = new ArrayList<>(capacity);
        for (int i = 0; i < capacity; i++) {
            parkingSpots.add(new ParkingSpot(i + 1));
        }
    }

    public boolean parkVehicle(Vehicle vehicle) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Do you want to select a parking spot by your choice? (yes/no)");
        String choice = scanner.nextLine();
        if (choice.equalsIgnoreCase("yes")) {
            System.out.println("Enter the spot number:");
            int spotNumber = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            if (spotNumber >= 1 && spotNumber <= capacity) {
                ParkingSpot spot = parkingSpots.get(spotNumber - 1);
                if (!spot.isOccupied()) {
                    spot.parkVehicle(vehicle);
                    parkedVehicles.add(vehicle);
                    return true;
                }
            }
            System.out.println("Invalid spot number or spot is already occupied.");
        } else {
            for (ParkingSpot spot : parkingSpots) {
                if (!spot.isOccupied()) {
                    spot.parkVehicle(vehicle);
                    parkedVehicles.add(vehicle);
                    System.out.println("Vehicle parked successfully at spot number: " + spot.getSpotNumber());
                    return true;
                }
            }
        }
        System.out.println("No available parking spots.");
        return false;
    }

    public int getCapacity() {
        return capacity;
    }
} 
class Reservation {
    private ParkingLot parkingLot;
    private Date reservationDateTime;
    private Date parkingStartDateTime;
    private int durationHours;
    private boolean selectParkingSpot;

    public Reservation(ParkingLot parkingLot, Date reservationDateTime, Date parkingStartDateTime, int durationHours,boolean selectParkingSpot) {
        this.parkingLot = parkingLot;
        this.reservationDateTime = reservationDateTime;
        this.parkingStartDateTime = parkingStartDateTime;
        this.durationHours = durationHours;
        this.selectParkingSpot = selectParkingSpot;
    }

    // Getters and setters for Reservation class attributes

    public ParkingLot getParkingLot() {
        return parkingLot;
    }

    public void setParkingLot(ParkingLot parkingLot) {
        this.parkingLot = parkingLot;
    }

    public Date getReservationDateTime() {
        return reservationDateTime;
    }

    public void setReservationDateTime(Date reservationDateTime) {
        this.reservationDateTime = reservationDateTime;
    }

    public Date getParkingStartDateTime() {
        return parkingStartDateTime;
    }

    public void setParkingStartDateTime(Date parkingStartDateTime) {
        this.parkingStartDateTime = parkingStartDateTime;
    }

    public int getDurationHours() {
        return durationHours;
    }

    public void setDurationHours(int durationHours) {
        this.durationHours = durationHours;
    }
     public boolean isSelectParkingSpot() {
        return selectParkingSpot;
    }

    public void setSelectParkingSpot(boolean selectParkingSpot) {
        this.selectParkingSpot = selectParkingSpot;
    }
    
}

public class FinalDoc  extends JFrame  implements ActionListener{
            public void actionPerformed(ActionEvent e) {
            }
    private JPanel cardPanel;  
    private CardLayout cardLayout;
    private JTextField emailField;
    private JPasswordField passwordField;
    private ParkingLot parkingLot;
    private JTextField licensePlateField;
    private JRadioButton carRadioButton;
    private boolean selectParkingSpot = false;
     private String vehicleType; // Declare vehicleType as a class variable

    public FinalDoc () {
        setTitle("Parking System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        cardPanel = new JPanel();
        cardLayout = new CardLayout();
        cardPanel.setLayout(cardLayout);

        // Create and add login page
        JPanel loginPanel = createLoginPage();
        cardPanel.add(loginPanel, "login");

        // Create and add vehicle selection page
        JPanel vehicleSelectionPanel = createVehicleSelectionPage();
        cardPanel.add(vehicleSelectionPanel, "vehicleSelection");
        
        JPanel parkingLotPanel = createParkingLotPage(10);
        cardPanel.add(parkingLotPanel, "parkingLot");

        // Create and add reservation page
        JPanel reservationPanel = createReservationPage();
        cardPanel.add(reservationPanel, "reservation");

        // Show the login page initially
        cardLayout.show(cardPanel, "login");

        add(cardPanel);
        setVisible(true);
    }

    private JPanel createLoginPage() {
        JPanel loginPanel = new JPanel(new GridLayout(0, 2));

        JLabel emailLabel = new JLabel("Email:");
        emailField = new JTextField();
        loginPanel.add(emailLabel);
        loginPanel.add(emailField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordField = new JPasswordField();
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);

        JButton loginButton = new JButton("Login");
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userAuthentication();
            }
        });
        loginPanel.add(loginButton);

        return loginPanel;
    }

    private JPanel createVehicleSelectionPage() {
        JPanel vehicleSelectionPanel = new JPanel(new GridLayout(0, 1));

        JLabel vehicleLabel = new JLabel("Select Vehicle Type:");
        vehicleSelectionPanel.add(vehicleLabel);

        JRadioButton carRadioButton = new JRadioButton("Car");
        JRadioButton motorcycleRadioButton = new JRadioButton("Motorcycle");

        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(carRadioButton);
        buttonGroup.add(motorcycleRadioButton);

        vehicleSelectionPanel.add(carRadioButton);
        vehicleSelectionPanel.add(motorcycleRadioButton);

        JButton continueButton = new JButton("Continue");
        continueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (carRadioButton.isSelected()) {
                    vehicleType = "Car";
                    selectParkingSpot = true;
                } else if (motorcycleRadioButton.isSelected()) {
                    vehicleType = "Motorcycle";
                    selectParkingSpot = false;
                } else {
                    JOptionPane.showMessageDialog(null, "Please select a vehicle type.");
                    return;
                }
                cardLayout.show(cardPanel, "parkingLot");
            }
        });
        vehicleSelectionPanel.add(continueButton);

        return vehicleSelectionPanel;
    }
 
     private JPanel createParkingLotPage(int capacity) {
        JPanel parkingLotPanel = new JPanel(new GridLayout(2, 1));

        JButton spotButton = new JButton("parkingspot");
        spotButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parkVehicle(vehicleType);
            // After parking, change the panel to the reservation panel
            cardLayout.show(cardPanel, "reservation");
            }
        });
        parkingLotPanel.add(spotButton);

      JButton goToReservationButton = new JButton("Go to Reservation");
    goToReservationButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            cardLayout.show(cardPanel, "reservation");
        }
    });
    parkingLotPanel.add(goToReservationButton);

    return parkingLotPanel;
    }
    
    private JPanel createReservationPage() {
        JPanel reservationPanel = new JPanel(new GridLayout(0, 1));

        JLabel reservationLabel = new JLabel("Reservation Page");
        reservationPanel.add(reservationLabel);

        JButton makeReservationButton = new JButton("Make Reservation");
        makeReservationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                makeReservation();
            }
        });
        reservationPanel.add(makeReservationButton);

        return reservationPanel;
    }

    private void userAuthentication() {
       String email = emailField.getText();
    String password = new String(passwordField.getPassword());
    
    // Check if email and password are empty
        if (email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

    // Read stored email and password from file
    String storedPasswordEmail = UserAuthentication.readPasswordEmail("d:\\userPassword.txt");

    // Check if stored email and password are available
    if (storedPasswordEmail == null || storedPasswordEmail.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Password file is empty.");
        return;
    }

    // Split stored credentials into email and password
    String[] credentials = storedPasswordEmail.split(",");
    if (credentials.length != 2) {
        JOptionPane.showMessageDialog(this, "Invalid format in password file.");
        return;
    }

    String storedEmail = credentials[1];
    String storedPassword = credentials[0];

    // Check if input email and password match stored credentials
    if (email.equals(storedEmail) && password.equals(storedPassword)) {
        JOptionPane.showMessageDialog(this, "User logged in successfully!");
        parkingLot = new ParkingLot(10);
        cardLayout.show(cardPanel, "vehicleSelection");
    } else {
        JOptionPane.showMessageDialog(this, "Invalid email or password. Please try again.");
    }
    }
 
    private void parkVehicle(String vehicleType) {
         if (vehicleType == null || vehicleType.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a vehicle type.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
        // Display dialog to ask if user wants to select a parking spot
        int choice = JOptionPane.showConfirmDialog(this, "Do you want to select a parking spot by your choice?", "Park Vehicle", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            // User wants to select a parking spot
            String spotNumberStr = JOptionPane.showInputDialog(this, "Enter the spot number:");
            if (spotNumberStr != null) {
            try {
                int spotNumber = Integer.parseInt(spotNumberStr);
                boolean parked = false;
                String licensePlate = JOptionPane.showInputDialog(this, "Enter the license plate number:");
                if (licensePlate != null) {
                    if (vehicleType.equalsIgnoreCase("Car")) {
                        parked = parkingLot.parkVehicle(new Car(licensePlate));
                    } else if (vehicleType.equalsIgnoreCase("Motorcycle")) {
                        parked = parkingLot.parkVehicle(new Motorcycle(licensePlate));
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid vehicle type.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "License plate cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                if (parked) {
                    JOptionPane.showMessageDialog(this, "Vehicle parked successfully at spot number: " + spotNumber);
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid spot number or spot is already occupied.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid spot number. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // User does not want to select a parking spot, park in the first available spot
        boolean parked = false;
        String licensePlate = JOptionPane.showInputDialog(this, "Enter the license plate number:");
        if (licensePlate != null) {
            if (vehicleType.equalsIgnoreCase("Car")) {
                parked = parkingLot.parkVehicle(new Car(licensePlate));
            } else if (vehicleType.equalsIgnoreCase("Motorcycle")) {
                parked = parkingLot.parkVehicle(new Motorcycle(licensePlate));
            } else {
                JOptionPane.showMessageDialog(this, "Invalid vehicle type.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "License plate cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (parked) {
            JOptionPane.showMessageDialog(this, "Vehicle parked successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "No available parking spots.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }   
    }
    private void makeReservation() {
        // Your make reservation logic here
        if (parkingLot == null) {
            JOptionPane.showMessageDialog(this, "Please log in first.");
            return;
        }

        String vehicleType = selectParkingSpot ? "Car" : "Motorcycle";
        String startDateTimeStr = JOptionPane.showInputDialog("Enter reservation start date and time (yyyy-MM-dd HH:mm):");
        if (startDateTimeStr == null) return;
        String durationHoursStr = JOptionPane.showInputDialog("Enter duration of reservation (in hours):");
        if (durationHoursStr == null) return;

        Date startDateTime;
        int durationHours;
        try {
            startDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(startDateTimeStr);
            durationHours = Integer.parseInt(durationHoursStr);
            Reservation reservation = new Reservation(parkingLot, new Date(), startDateTime, durationHours, selectParkingSpot);
            int paymentAmount = payment(vehicleType, durationHours, selectParkingSpot);
            JOptionPane.showMessageDialog(this, "Your parking fee is: Rs. " + paymentAmount);
            JOptionPane.showMessageDialog(this, "Thank you for using our Parking System.");
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please enter date in the format yyyy-MM-dd HH:mm.");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.");
        }
    }

    private int payment(String vehicleType, int durationHours, boolean selectParkingSpot) {
        // Your payment calculation logic here
        int costPerHour = vehicleType.equals("Car") ? 50 : 100;
        int extraCharge = selectParkingSpot ? 50 : 0;
        return (costPerHour * durationHours) + extraCharge;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new FinalDoc ().setVisible(true);
            }
        });
    }
}
